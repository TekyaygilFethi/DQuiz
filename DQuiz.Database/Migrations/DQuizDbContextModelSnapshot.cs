// <auto-generated />
using DQuiz.Database.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DQuiz.Database.Migrations
{
    [DbContext(typeof(DQuizDbContext))]
    partial class DQuizDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence<int>("OrderSequence")
                .StartsAt(6L);

            modelBuilder.Entity("DQuiz.Data.POCO.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChosenCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 1,
                            Text = "Adi Gallia"
                        },
                        new
                        {
                            Id = 2,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 1,
                            Text = "Mace Windu"
                        },
                        new
                        {
                            Id = 3,
                            ChosenCount = 0,
                            IsTrue = true,
                            QuestionId = 1,
                            Text = "Obi-Wan Kenobi"
                        },
                        new
                        {
                            Id = 4,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 1,
                            Text = "Sheev Palpatine"
                        },
                        new
                        {
                            Id = 5,
                            ChosenCount = 0,
                            IsTrue = true,
                            QuestionId = 2,
                            Text = "Eski mentörü olan Boss'u öldürerek"
                        },
                        new
                        {
                            Id = 6,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 2,
                            Text = "Eski mentörü olan Boss'u Amerika'ya teslim ederek"
                        },
                        new
                        {
                            Id = 7,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 2,
                            Text = "Ünlü bilim adamı Sokolov'u Ruslardan kaçırarak"
                        },
                        new
                        {
                            Id = 8,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 2,
                            Text = "Ocelot ile olan mücadelesini kazanarak"
                        },
                        new
                        {
                            Id = 9,
                            ChosenCount = 0,
                            IsTrue = true,
                            QuestionId = 3,
                            Text = "Zack Fair"
                        },
                        new
                        {
                            Id = 10,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 3,
                            Text = "Sephiroth"
                        },
                        new
                        {
                            Id = 11,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 3,
                            Text = "Cloud"
                        },
                        new
                        {
                            Id = 12,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 3,
                            Text = "Noctis"
                        },
                        new
                        {
                            Id = 13,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 4,
                            Text = "The Prestigious Mask"
                        },
                        new
                        {
                            Id = 14,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 4,
                            Text = "Kaine Escape"
                        },
                        new
                        {
                            Id = 15,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 4,
                            Text = "Deep Crimson Foe"
                        },
                        new
                        {
                            Id = 16,
                            ChosenCount = 0,
                            IsTrue = true,
                            QuestionId = 4,
                            Text = "Song of The Ancient"
                        },
                        new
                        {
                            Id = 17,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 5,
                            Text = "Laura"
                        },
                        new
                        {
                            Id = 18,
                            ChosenCount = 0,
                            IsTrue = true,
                            QuestionId = 5,
                            Text = "Maria"
                        },
                        new
                        {
                            Id = 19,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 5,
                            Text = "Angela"
                        },
                        new
                        {
                            Id = 20,
                            ChosenCount = 0,
                            IsTrue = false,
                            QuestionId = 5,
                            Text = "Eileen"
                        });
                });

            modelBuilder.Entity("DQuiz.Data.POCO.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FalseCount")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TrueCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("MetricTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FalseCount = 0,
                            QuestionId = 1,
                            TrueCount = 0
                        },
                        new
                        {
                            Id = 2,
                            FalseCount = 0,
                            QuestionId = 2,
                            TrueCount = 0
                        },
                        new
                        {
                            Id = 3,
                            FalseCount = 0,
                            QuestionId = 3,
                            TrueCount = 0
                        },
                        new
                        {
                            Id = 4,
                            FalseCount = 0,
                            QuestionId = 4,
                            TrueCount = 0
                        },
                        new
                        {
                            Id = 5,
                            FalseCount = 0,
                            QuestionId = 5,
                            TrueCount = 0
                        });
                });

            modelBuilder.Entity("DQuiz.Data.POCO.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR OrderSequence");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Order = 1,
                            Text = "Star Wars evreninde Anakin Skywalker'ın ustası kimdir?"
                        },
                        new
                        {
                            Id = 2,
                            Order = 2,
                            Text = "Metal Gear Solid serisinde Naked Snake, Big Boss ünvanını nasıl kazanmıştır?"
                        },
                        new
                        {
                            Id = 3,
                            Order = 3,
                            Text = "Final Fantasy 7 Remake oyununda kahramanlarımız kaderi değiştirdiğinde, \"The Price of Freedom is Steep\" repliğiye akıllara kazınan ve ölmesi gerekirken ölmeyen karakter hangisidir?"
                        },
                        new
                        {
                            Id = 4,
                            Order = 4,
                            Text = "Nier Replicant oyununda Devola ve Popola'nın tavernada söylediği şarkının adı nedir?"
                        },
                        new
                        {
                            Id = 5,
                            Order = 5,
                            Text = "Silent Hill 2 oyununda kahramanımızın eşine tıpatıp benzeyen ve kahramanımızı cezalandırmak için gönderilen karakterin adı nedir?"
                        });
                });

            modelBuilder.Entity("DQuiz.Data.POCO.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "12345",
                            Username = "GAIH"
                        });
                });

            modelBuilder.Entity("DQuiz.Data.POCO.Answer", b =>
                {
                    b.HasOne("DQuiz.Data.POCO.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DQuiz.Data.POCO.Metric", b =>
                {
                    b.HasOne("DQuiz.Data.POCO.Question", "Question")
                        .WithOne("Metric")
                        .HasForeignKey("DQuiz.Data.POCO.Metric", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DQuiz.Data.POCO.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Metric");
                });
#pragma warning restore 612, 618
        }
    }
}
